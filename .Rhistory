geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
# setting working directory
# loading and tidying data
## Loading all the package you need here
library(tidyverse)
library(lubridate)
library(unibeCols)
library(esquisse)
library(medicaldata)
library(readr)
library(stats4)
library(gtsummary)
library(ggplot2)
library(dplyr)
library(knitr)
library(ggcorrplot)
library(epitools)
###### upload data from medicaldata package
# N.B. setwd ("data/raw/" : set your working directory for data_process)
data <- covid_testing
write.csv(data, file = "my_data.csv")
my_data <- read_csv("my_data.csv")
my_data_processed <- my_data %>%
mutate(gender = factor(gender, levels= c("female", "male"), labels=c("female", "male")),
result=factor(result, levels=c("positive", "negative", "invalid")),
clinic_name=factor(clinic_name, levels=c( )),
test_id = factor(test_id, levels=c("covid", "xcvd1")),
demo_group=factor(demo_group, levels=c("patient", "misc_adult", "client", "other adult", "unidentified")),
drive_thru_ind=factor(drive_thru_ind, levels=c(0,1), labels=c("Not collected at drive_thru-site", "collected at drive-thru site")),
payor_group=factor(payor_group, levels=c("commercial", "governmenet", "unassigned", "medical assistance", "self pay", "charity care", "other")),
orderset=factor(orderset, levels=c(1, 0), labels=c("Collected via orderset", "Not collected via orderset")))
write.csv(my_data_processed, file = "~/Documents/PHSC_BSR/data/processed/my_data_processed.csv")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
### Transformation of the skew left to look more normal
my_data_processed %>%
ggplot(my_data_processed, mapping = aes()) +
geom_histogram(mapping =  aes(log(x = age), y = after_stat(density), colour = gender, fill = gender ),
alpha = 0.4, bins = 100 ) +
geom_density(mapping = aes(log(x = age) , colour = gender), linewidth = 1.5 ) +
theme(text = element_text(size=20), legend.position = "top") +
xlab( "Age in year" ) +
scale_colour_manual(name = "" , values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
scale_fill_manual(name = "", values=c("female"=unibePastelS()[1],
"male"=unibeIceS()[1]), labels = c("Female", "Male")) +
geom_vline(mapping = aes(xintercept = median(age)), color = unibeRedS()[1], linewidth = 1)+
labs(caption = "Fig.4 Normalization of our data using the log function")
##### Create correlation matrix of all numerical measurements and plot the matrix
cor_matrix <- my_data_processed %>%
dplyr::select(pan_day,age, ct_result, col_rec_tat, rec_ver_tat) %>%
cor(use = "complete.obs", method = "spearman")
cor_matrix %>%
kable(digits = 2)
ggcorrplot(cor_matrix, lab=TRUE)+
labs(caption= "Fig.5: the correlation matrix using quantitative variable")
### comparing two variables using Bland-Altman plot
data <- data.frame(method1 =c(my_data_processed$age),
method2 = c(my_data_processed$ct_result))
my_data_processed$Diff <- my_data_processed$method1 - my_data_processed$method2
### Comparing two variable with geom_boplox, geom_point and geom_line
my_data_processed %>%
ggplot(mapping =  aes(ct_result, age)) +
geom_boxplot(width = 0.25, fill = "#FFC98D") +
geom_point(colour ="steelblue", size = 2) +
geom_line(aes(group = subject_id), colour = "steelblue", linetype = "11") +
theme_bw()
ggplot(my_data_processed, aes(x = Average, y = Diff)) +
geom_point() +
geom_hline(yintercept = mean(my_data_processed$Diff), linetype = "dashed", color = "red") +
geom_abline(intercept = mean(my_data_processed$Diff), slope = 0, linetype = "dotted", color = "black") +
labs(x = "Average", y = "Difference") +
theme_minimal()
my_data_processed$Diff <- my_data_processed$method1 - my_data_processed$method2
#### Comparing two variable with geom_boplox, geom_point and geom_line
my_data_processed %>%
ggplot(mapping =  aes(ct_result, age)) +
geom_boxplot(width = 0.25, fill = "#FFC98D") +
geom_point(colour ="steelblue", size = 2) +
geom_line(aes(group = subject_id), colour = "steelblue", linetype = "11") +
theme_bw()+
labs(caption = "Fig. 5 : Geom point and geomline comparing the age to result")
my_data_processed %>%
ggplot(mapping =  aes(ct_result, age)) +
geom_boxplot(width = 0.25, fill = "#FFC98D") +
geom_point(colour ="green", size = 1) +
geom_line(aes(group = subject_id), colour = "red", linetype = "11") +
theme_bw()+
labs(caption = "Fig. 5 : Geom point and geomline comparing the age to result")
my_data_processed %>%
ggplot(mapping =  aes(ct_result, age)) +
geom_boxplot(width = 0.25, fill = "red") +
geom_point(colour ="blue", size = 1) +
geom_line(aes(group = subject_id), colour = "steelblue", linetype = "11") +
theme_bw()+
labs(caption = "Fig. 5 : Geom point and geomline comparing the age to result")
##### Comparing two variable with geom_boplox, geom_point and geom_line
my_data_processed %>%
ggplot(mapping =  aes(ct_result, age)) +
geom_boxplot(width = 0.25, fill = "red") +
geom_point(colour ="blue", size = 1) +
geom_line(aes(group = subject_id), colour = "steelblue", linetype = "11") +
theme_bw()+
labs(caption = "Fig. 5 : Geom point and geomline comparing the age to result")
##### Calcul of Inference using proportions
## To calculate the inferance we Create a dichotomic variable using my outcome (result): for this I assign the 1= "positive result" and  0 ="not positive results".
my_data_processed$outcomed <- 0
my_data_processed$outcomed [my_data_processed$result=="positive"] <-1
my_data_processed$outcomed <- factor(my_data_processed$outcomed, levels= c(0,1), labels=c("Not positive", "Positive"))
## calculate the proportion of test result according to the gender
outcomed_t <-  table(my_data_processed$gender, my_data_processed$outcomed)
outcomed_t
n_outcomed_p <- rowSums(outcomed_p)
n_outcomed_p <- rowSums(outcomed_t)
n_outcomed_p
## calculate the proportion of test result according to the gender
outcomed_t <-  table(my_data_processed$gender, my_data_processed$outcomed)
outcomed_t
n_outcomed_p <- rowSums(outcomed_t)
n_outcomed_p
outcomed_p <- outcomed_t [ ,"1"]/n_outcomed_p
outcomed_p <- outcomed_t [ ,"1"]/n_outcomed_t
outcomed_p <- outcomed_t [ ,"1"]/n_outcomed_
outcomed_p <- outcomed_t [ ,"1"]/n_outcomed_p
outcomed_p <- outcomed_t [ ,"1"]/n_outcomed_t
## calculate the proportion of test result according to the gender
outcomed_t <-  table(my_data_processed$gender, my_data_processed$outcomed)
outcomed_t
n_outcomed_p <- rowSums(outcomed_t)
n_outcomed_p
outcomed_p <- outcomed_t [ ,"1"]/n_outcomed_t
outcomed_p <- outcomed_t ["1" , ]/n_outcomed_t
outcomed_p <- outcomed_t [ ,"1"]/n_outcomed_p
outcomed_p <- outcomed_t [ ,"0"]/n_outcomed_p
outcomed_p <- outcomed_t [ ,"0"]/n_outcomed_p
SE_outcomed <- sqrt(outcomed_p * (1- outcomed_p)/n_outcomed_p)
lowerCI_outcome_p <- outcomed_p - qnorm(0.975)* SE_outcomed
upperCI_outcome_p <- outcomed_p + qnorm(0.975)* SE_outcomed
cbind(outcomed_p, lowerCI_outcome_p, upperCI_outcome_p)
prop.test(outcomed_t[1,2],n=n_outcomed_p[1])
CI95_result <-prop.test(outcomed_t[1,2],n=n_outcomed_p[1])
names(CI95_result)
CI95_result$conf.int
outcomed_p <- outcomed_p [ ,"1"]/n_outcomed_p
outcomed_p <- outcomed_p [ ,"2"]/n_outcomed_p
outcomed_p <- outcomed_p ["1",]/n_outcomed_p
outcomed_p <- n_outcomed_p [, "1"]/n_outcomed_p
outcomed_p <- n_outcomed_p [, "2"]/n_outcomed_p
outcomed_p <- n_outcomed_p [,]/n_outcomed_p
n_outcomed_p <- rowSums(outcomed_t)
n_outcomed_p
outcomed_p <- n_outcomed_p [, "1"]/n_outcomed_p
n_outcomed_p <- rowSums(outcomed_t)
n_outcomed_p
as.matrix(n_outcomed_p)
outcomed_p <- n_outcomed_p [, "1"]/n_outcomed_p
outcomed_p <- n_outcomed_p [,"1"]/n_outcomed_p
outcomed_p <- n_outcomed_p [,1]/n_outcomed_p
outcomed_p <- n_outcomed_p [,1]/n_outcomed_p
as.matrix(outcomed_p)
### Inference using proportions
## Create a dichotomic variable using my outcome (result): for this I assign the 1= "positive result" and  0 ="not positive results"
my_data_processed$outcomed <- 0
my_data_processed$outcomed [my_data_processed$result=="positive"] <-1
my_data_processed$outcomed <- factor(my_data_processed$outcomed, levels= c(0,1), labels=c("Not positive", "Positive"))
## calculate the proportion of test result according to the gender
outcomed_t <-  table(my_data_processed$gender, my_data_processed$outcomed)
outcomed_t
n_outcomed_p <- rowSums(outcomed_t)
n_outcomed_p
as.matrix(n_outcomed_p)
#outcomed_p <- n_outcomed_p [,1]/n_outcomed_p
as.matrix(outcomed_p)
## Calculate the 95% Confidence intervals (CI)
SE_outcomed <- sqrt(outcomed_p * (1- outcomed_p)/n_outcomed_p)
lowerCI_outcome_p <- outcomed_p - qnorm(0.975)* SE_outcomed
upperCI_outcome_p <- outcomed_p + qnorm(0.975)* SE_outcomed
cbind(outcomed_p, lowerCI_outcome_p, upperCI_outcome_p)
prop.test(outcomed_t[1,2],n=n_outcomed_p[1])
CI95_result <-prop.test(outcomed_t[1,2],n=n_outcomed_p[1])
names(CI95_result)
CI95_result$conf.int
## Sample test for equality of proportions with continuity  correction
chisq.test(cbind(outcomed_t[, 2], outcomed_t[, 1]))
## Pearson's Chi-squared test with Yates' continuity  correction
## Risk ratios and odds ratios: calculation of RR and OR for population to have the disease considering the gender
RR_outcome <- n_outcomed_p["female"] / n_outcomed_p["male"]
RR_outcome
OR_outcome <- outcomed_t["female", "1"]/outcomed_t["male", "0"]
RR_outcome <- n_outcomed_p["female"] / n_outcomed_p["male"]
RR_outcome
OR_outcome <- n_outcomed_p["female", "1"]/n_outcomed_p["male", "0"]
OR_outcome <- outcomed_p["female", "1"]/n_outcomed_p["male", "0"]
OR_outcome
#OR_outcome <- outcomed_p["female", "1"]/n_outcomed_p["male", "0"]
OR_outcome
##### Inference using proportions
# Create a dichotomic variable using my outcome (result): for this I assign the 1= "positive result" and  0 ="not positive results"
my_data_processed$outcomed <- 0
my_data_processed$outcomed [my_data_processed$result=="positive"] <-1
my_data_processed$outcomed <- factor(my_data_processed$outcomed, levels= c(0,1), labels=c("Not positive", "Positive"))
# calculate the proportion of test result according to the gender
outcomed_t <-  table(my_data_processed$gender, my_data_processed$outcomed)
outcomed_t
n_outcomed_p <- rowSums(outcomed_t)
n_outcomed_p
as.matrix(n_outcomed_p)
#outcomed_p <- n_outcomed_p [,1]/n_outcomed_p
as.matrix(outcomed_p)
## Calculate the 95% Confidence intervals (CI)
SE_outcomed <- sqrt(outcomed_p * (1- outcomed_p)/n_outcomed_p)
lowerCI_outcome_p <- outcomed_p - qnorm(0.975)* SE_outcomed
upperCI_outcome_p <- outcomed_p + qnorm(0.975)* SE_outcomed
cbind(outcomed_p, lowerCI_outcome_p, upperCI_outcome_p)
prop.test(outcomed_t[1,2],n=n_outcomed_p[1])
CI95_result <-prop.test(outcomed_t[1,2],n=n_outcomed_p[1])
names(CI95_result)
CI95_result$conf.int
## Sample test for equality of proportions with continuity  correction
chisq.test(cbind(outcomed_t[, 2], outcomed_t[, 1]))
## Pearson's Chi-squared test with Yates' continuity  correction
## Risk ratios and odds ratios: calculation of RR and OR for population to have the disease considering the gender
RR_outcome <- n_outcomed_p["female"] / n_outcomed_p["male"]
RR_outcome
#OR_outcome <- outcomed_p["female", "1"]/n_outcomed_p["male", "0"]
OR_outcome
riskratio(outcomed_t, correction= TRUE)
riskratio(outcomed_t, correction= TRUE, rev= "rows")
oddsratio(outcomed_t, correction = TRUE, rev = "rows")
##### Inference using proportions
# Create a dichotomic variable using my outcome (result): for this I assign the 1= "positive result" and  0 ="not positive results"
my_data_processed$outcomed <- 0
my_data_processed$outcomed [my_data_processed$result=="positive"] <-1
my_data_processed$outcomed <- factor(my_data_processed$outcomed, levels= c(0,1), labels=c("Not positive", "Positive"))
# calculate the proportion of test result according to the gender
outcomed_t <-  table(my_data_processed$gender, my_data_processed$outcomed)
outcomed_t
n_outcomed_p <- rowSums(outcomed_t)
n_outcomed_p
as.matrix(n_outcomed_p)
outcomed_p <- n_outcomed_p [,1]/n_outcomed_p
##### Inference using proportions
# Create a dichotomic variable using my outcome (result): for this I assign the 1= "positive result" and  0 ="not positive results"
my_data_processed$outcomed <- 0
my_data_processed$outcomed [my_data_processed$result=="positive"] <-1
my_data_processed$outcomed <- factor(my_data_processed$outcomed, levels= c(0,1), labels=c("Not positive", "Positive"))
# calculate the proportion of test result according to the gender
outcomed_t <-  table(my_data_processed$gender, my_data_processed$outcomed)
outcomed_t
n_outcomed_p <- rowSums(outcomed_t)
n_outcomed_p
as.matrix(n_outcomed_p)
#outcomed_p <- n_outcomed_p [,1]/n_outcomed_p
as.matrix(outcomed_p)
## Calculate the 95% Confidence intervals (CI)
SE_outcomed <- sqrt(outcomed_p * (1- outcomed_p)/n_outcomed_p)
lowerCI_outcome_p <- outcomed_p - qnorm(0.975)* SE_outcomed
upperCI_outcome_p <- outcomed_p + qnorm(0.975)* SE_outcomed
cbind(outcomed_p, lowerCI_outcome_p, upperCI_outcome_p)
prop.test(outcomed_t[1,2],n=n_outcomed_p[1])
CI95_result <-prop.test(outcomed_t[1,2],n=n_outcomed_p[1])
names(CI95_result)
CI95_result$conf.int
## Sample test for equality of proportions with continuity  correction
chisq.test(cbind(outcomed_t[, 2], outcomed_t[, 1]))
## Pearson's Chi-squared test with Yates' continuity  correction
## Risk ratios and odds ratios: calculation of RR and OR for population to have the disease considering the gender
RR_outcome <- n_outcomed_p["female"] / n_outcomed_p["male"]
RR_outcome
#OR_outcome <- outcomed_p["female", "1"]/n_outcomed_p["male", "0"]
OR_outcome
riskratio(outcomed_t, correction= TRUE)
riskratio(outcomed_t, correction= TRUE, rev= "rows")
oddsratio(outcomed_t, correction = TRUE, rev = "rows")
### Inference using proportions
## Create a dichotomic variable using my outcome (result): for this I assign the 1= "positive result" and  0 ="not positive results"
my_data_processed$outcomed <- 0
my_data_processed$outcomed [my_data_processed$result=="positive"] <-1
my_data_processed$outcomed <- factor(my_data_processed$outcomed, levels= c(0,1), labels=c("Not positive", "Positive"))
## calculate the proportion of test result according to the gender
outcomed_t <-  table(my_data_processed$gender, my_data_processed$outcomed)
outcomed_t
n_outcomed_p <- rowSums(outcomed_t)
n_outcomed_p
as.matrix(n_outcomed_p)
outcomed_p <- n_outcomed_p [,1]/n_outcomed_p
as.matrix(outcomed_p)
#outcomed_p <- n_outcomed_p [,1]/n_outcomed_p
as.matrix(outcomed_p)
my_data_processed$outcomed <- 0
my_data_processed$outcomed [my_data_processed$result=="positive"] <-1
my_data_processed$outcomed <- factor(my_data_processed$outcomed, levels= c(0,1), labels=c("Not positive", "Positive"))
outcomed_t <-  table(my_data_processed$gender, my_data_processed$outcomed)
outcomed_t
n_outcomed_p <- rowSums(outcomed_t)
n_outcomed_p
as.matrix(n_outcomed_p)
#outcomed_p <- n_outcomed_p [,1]/n_outcomed_p
as.matrix(outcomed_p)
SE_outcomed <- sqrt(outcomed_p * (1- outcomed_p)/n_outcomed_p)
lowerCI_outcome_p <- outcomed_p - qnorm(0.975)* SE_outcomed
upperCI_outcome_p <- outcomed_p + qnorm(0.975)* SE_outcomed
cbind(outcomed_p, lowerCI_outcome_p, upperCI_outcome_p)
prop.test(outcomed_t[1,2],n=n_outcomed_p[1])
CI95_result <-prop.test(outcomed_t[1,2],n=n_outcomed_p[1])
names(CI95_result)
CI95_result$conf.int
chisq.test(cbind(outcomed_t[, 2], outcomed_t[, 1]))
RR_outcome <- n_outcomed_p["female"] / n_outcomed_p["male"]
RR_outcome
OR_outcome <- outcomed_t["female", "1"]/outcomed_t["male", "0"]
RR_outcome <- n_outcomed_p["female"] / n_outcomed_p["male"]
RR_outcome
OR_outcome <- outcomed_p["female", "1"]/outcomed_p["male", "0"]
OR_outcome <- outcomed_p["female", "1"]/outcomed_p["male", "0"]
OR_outcome <- n_outcomed_p["female", "1"]/n_outcomed_p["male", "0"]
OR_outcome <- outcomed_t["female", "1"]/outcomed_t["male", "0"]
oddsratio(outcomed_t, correction = TRUE, rev = "rows")
oddsratio(outcomed_t, correction = TRUE, rev = "rows")
## Calculate the 95% Confidence intervals (CI)
SE_outcomed <- sqrt(outcomed_t * (1- outcomed_t)/n_outcomed_p)
lowerCI_outcome_p <- outcomed_t - qnorm(0.975)* SE_outcomed
upperCI_outcome_p <- outcomed_t + qnorm(0.975)* SE_outcomed
cbind(outcomed_p, lowerCI_outcome_p, upperCI_outcome_p)
prop.test(outcomed_t[1,2],n=n_outcomed_p[1])
SE_outcomed <- sqrt(outcomed_t * (1- outcomed_t)/n_outcomed_p)
lowerCI_outcome_t <- outcomed_t - qnorm(0.975)* SE_outcomed
upperCI_outcome_t <- outcomed_t + qnorm(0.975)* SE_outcomed
cbind(outcomed_t, lowerCI_outcome_t, upperCI_outcome_t)
SE_outcomed <- sqrt(outcomed_t * (1- outcomed_t)/n_outcomed_p)
lowerCI_outcome_t <- outcomed_t - qnorm(0.975)* SE_outcomed
upperCI_outcome_t <- outcomed_t + qnorm(0.975)* SE_outcomed
cbind(outcomed_t, lowerCI_outcome_t, upperCI_outcome_t)
my_data_processed <- read_csv("~/Documents/PHSC_BSR/data/processed/my_data_processed.csv",
col_types = cols(gender = col_factor(levels = c()),
result = col_factor(levels = c())))
my_data_processed %>%
dplyr::select(gender, pan_day, demo_group, test_id, drive_thru_ind, ct_result, orderset,
payor_group, col_rec_tat, rec_ver_tat, result) %>%
tbl_summary(by = gender, type = c(rad_num = "continuous", logical = "categorical")) %>%
add_overall() %>%
add_p() %>%
add_n() %>%
modify_header(p.value ~ "Proportion") %>%
as_gt()
